{"version":3,"sources":["components/form/dropdown/dropdown.module.css","components/message/message.module.css","components/form/input/input.module.css","ecoStore/packages/packages.module.css","farm/farm.module.css","ecoStore/history/event/event.module.css","components/card/card.module.css","ecoStore/ecoStore.module.css","ecoStore/history/history.module.css","serviceWorker.js","components/form/Form.js","components/form/input/Input.js","components/card/Card.js","requests/requests.js","uuid/uuid.js","blockchain/packages.js","blockchain/fruit.js","blockchain/mockChain.js","blockchain/requests.js","components/message/Message.js","components/message/SuccessMessage.js","components/message/ErrorMessage.js","components/form/dropdown/Dropdown.js","components/form/dropdown/useDropdown.js","requests/hooks.js","farm/Farm.js","ecoStore/history/event/Event.js","ecoStore/history/arrow/Arrow.js","ecoStore/history/History.js","ecoStore/packages/package/package.js","ecoStore/packages/packages.js","ecoStore/responseToEvents.js","ecoStore/EcoStore.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","mapInput","type","name","value","checked","Form","onSubmit","children","e","preventDefault","form","inputs","querySelectorAll","result","forEach","i","console","log","mapForm","target","defaultProps","Input","id","label","required","disabled","readOnly","placeholder","defaultValue","defaultChecked","description","errorMessage","className","classNames","style","container","input","error","htmlFor","Card","card","postData","endpoint","body","start","success","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","JSON","stringify","then","res","json","err","getData","shortId","ShortUniqueId","uuid","prefix","randomUUID","mockedPackages","batchID","foodID","lotNo","farmID","dateOfHarvest","packageID","packagingHouseID","dateOfPackaging","distributionCenterID","dateOfDistribution","storeID","dateOfDelivery","mockedFruits","image","alt","setTimeout","status","stores","Array","map","mockRegisterFromPackageHouseToDistributionCenter","req","mockRegisterFromDistributionCenterToStore","Math","floor","random","length","dateofDelivery","mockRegisterFoodFromFarmToPackageHouse","mockRegisterPackage","repeat","registerBatchAndMockChain","request","update","dateOfPacking","mockRegisterBatch","getItem","itemID","updateStatus","port","loading","getMockedItem","message","getPackages","getMockedPackages","getFruits","getMockedFruits","Message","title","SuccessMessage","ErrorMessage","Dropdown","elements","defaultElement","defaultDescription","useState","setDescription","setValue","setElement","element","useEffect","useDropdown","display","setDisplay","dropdown","onClick","icon","faCaretUp","faCaretDown","size","caret","list","key","select","useStatus","defaultStatus","setLoading","setError","setResult","setStatus","useRequest","params","Farm","fruits","farm","faTractor","registerBatch","messsage","flexDirection","justifyContent","Event","timestamp","moment","format","src","Arrow","faArrowDown","History","events","history","index","Package","package","Packages","packages","resposponseToEvents","response","fruit","find","f","push","EcoStore","pkgs","pkg","updatePackageStatus","pkgID","setPackageID","background","faStoreAlt","onChange","App","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.642b2168.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"dropdown_container__2MuSb\",\"label\":\"dropdown_label__33c0v\",\"error\":\"dropdown_error__eEh7z\",\"dropdown\":\"dropdown_dropdown__3ROtb\",\"caret\":\"dropdown_caret__2dvhU\",\"list\":\"dropdown_list__OM9Ft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__2AbUU\",\"success\":\"message_success__2Azm2\",\"error\":\"message_error__3Rval\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"input_container__QAWrV\",\"label\":\"input_label__359Us\",\"error\":\"input_error__3S6Ie\",\"input\":\"input_input__2PZYz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packages\":\"packages_packages__1e7qv\",\"package\":\"packages_package__28v2U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"id\":\"farm_id__2xbTZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"event_container__2nzHx\",\"image\":\"event_image__3V92j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__39fDa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"ecoStore_background__39S5q\",\"card\":\"ecoStore_card__3aEfE\",\"events\":\"ecoStore_events__3Q4I0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"history_history__fHQjv\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst mapForm = form => {\r\n    const inputs = form.querySelectorAll(\"input\");\r\n\r\n    let result = {};\r\n\r\n    inputs.forEach(i => {\r\n        result = {...result, ...mapInput(i)}\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    return result;\r\n}\r\n\r\nconst mapInput = ({ type, name, value, checked }) => {\r\n    switch(type) {\r\n        case \"checkbox\": \r\n            return { [name]: checked ? value : null }\r\n        case \"radio\": \r\n            return checked ? { [name]: value } : null;\r\n        case \"submit\":\r\n            return {};\r\n        default:\r\n            return  { [name]: value };\r\n    }   \r\n}\r\n\r\nconst Form = ({ onSubmit, children }) => {\r\n\r\n    const submit = e => {\r\n        e.preventDefault();   \r\n        onSubmit(mapForm(e.target));\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n            {children}\r\n        </form>\r\n    );\r\n};\r\n\r\nForm.defaultProps = {\r\n    onSubmit: () => {}\r\n}\r\n\r\nForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n    children: PropTypes.node\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport style from './input.module.css';\r\n\r\nconst Input = (\r\n    { \r\n        id, \r\n        type, \r\n        label, \r\n        name, \r\n        required,\r\n        disabled, \r\n        readOnly, \r\n        placeholder, \r\n        value, \r\n        defaultValue, \r\n        defaultChecked, \r\n        description, \r\n        errorMessage, \r\n        className\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div className={classNames(style.container, className)}>\r\n            <input\r\n                className={style.input}\r\n                required={required} \r\n                type={type} \r\n                id={id}\r\n                name={name}\r\n                defaultValue={defaultValue}\r\n                placeholder={placeholder}\r\n                defaultChecked={defaultChecked}\r\n                disabled={disabled}\r\n                value={value}\r\n                readOnly={readOnly}\r\n            />\r\n            {description && <div>{description}</div>}\r\n            <div className={style.error}>{errorMessage}</div>\r\n            {label && (\r\n                <label className={style.label} htmlFor={id}>{label}</label>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nInput.defaultProps = {\r\n    type: 'text'\r\n};\r\n\r\nInput.propTypes = {\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    type: PropTypes.string,\r\n    value: PropTypes.any,\r\n    label: PropTypes.node,\r\n    required: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    defaultValue: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    description: PropTypes.string,\r\n    errorMessage: PropTypes.string,\r\n    defaultChecked: PropTypes.bool,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport style from './card.module.css';\r\n\r\nconst Card = ({ children, className }) => (\r\n    <div className={classNames(style.card, className)}>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nCard.propTypes = {\r\n    children: PropTypes.node,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Card;","export const postData = (endpoint, body, start, error, success) => {\r\n    start();\r\n\r\n    fetch(endpoint, {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *client\r\n        body: JSON.stringify(body) // body data type must match \"Content-Type\" header\r\n      }\r\n    ).then(res => res.json())\r\n     .then( res => success(res), err => error(err) );\r\n};\r\n\r\nexport const getData = (endpoint, start, error, success) => {\r\n    start();\r\n\r\n    fetch(endpoint, {\r\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *client\r\n      }\r\n    ).then(res => res.json())\r\n     .then( res => success(res), err => error(err) );\r\n};\r\n","import ShortUniqueId from 'short-unique-id';\r\nconst shortId = new ShortUniqueId();\r\nconst uuid = prefix => prefix + '-' + shortId.randomUUID(6);\r\n\r\nexport default uuid;","const mockedPackages = [\r\n    { \r\n        batchID: \"B1\",\r\n        foodID: \"1\",\r\n        lotNo: \"1\",\r\n        farmID: \"F1\",\r\n        dateOfHarvest: \"2020-01-15T14:23:22\",\r\n        packageID: \"P3\",\r\n        packagingHouseID: \"PH-230554\",\r\n        dateOfPackaging: \"2020-01-18T08:54:43\",\r\n        distributionCenterID: \"DC3\",\r\n        dateOfDistribution: \"2020-01-24T17:04:32\",\r\n        storeID: \"S3\",\r\n        dateOfDelivery: \"2020-01-26T06:47:14\"\r\n    }\r\n]\r\n\r\n export default mockedPackages;","const mockedFruits = [\r\n    {\r\n        foodID: \"1\",\r\n        image: \"https://image.flaticon.com/icons/svg/714/714197.svg\",\r\n        alt: \"Icon made by DinosoftLabs from Flaticon\",\r\n        name: \"Banana\",\r\n        description: \"Banana Lorem Ipsum\"\r\n    },\r\n    {\r\n        foodID: \"2\",\r\n        image: \"https://image.flaticon.com/icons/svg/700/700804.svg\",\r\n        alt: \"Icon made by DinosoftLabs from Flaticon\",\r\n        name: \"Mango\",\r\n        description: \"Mango Lorem Ipsum\"\r\n    },\r\n    {\r\n        foodID: \"3\",\r\n        image: \"https://image.flaticon.com/icons/svg/415/415733.svg\",\r\n        alt: \"Icons made by Freepik from Flaticon\",\r\n        name: \"Apple\",\r\n        description: \"Apple Lorem Ipsum\"\r\n    },\r\n    {\r\n        foodID: \"4\",\r\n        image: \"https://image.flaticon.com/icons/svg/590/590767.svg\",\r\n        alt: \"Icons made by Freepik from Flaticon\",\r\n        name: \"Orange\",\r\n        description: \"Orange Lorem Ipsum\"\r\n    }\r\n ]\r\n\r\n export default mockedFruits;","import uuid from '../uuid/uuid';\r\nimport mockedPackages from './packages';\r\nimport mockedFruits from './fruit';\r\n\r\nconst postData = (endpoint, body, start, error, success) => {\r\n    start();\r\n    setTimeout(() => success({ status: 'OK - ' + endpoint }), 1500);\r\n};\r\n\r\nconst stores = new Array(1).map(i => uuid('S'));\r\nconst randomStore = () => stores[Math.floor(Math.random() * stores.length)];\r\n\r\nconst mockRegisterFromDistributionCenterToStore = (req, start, error, success) => postData(\r\n    '/api/registerFromDistributionCenterToStore',\r\n    { ...req },\r\n    start, error, success\r\n  );\r\n\r\nconst mockRegisterFromPackageHouseToDistributionCenter = (req, start, error, success) => postData(\r\n    '/api/registerFromPackageHouseToDistributionCenter',\r\n    { ...req },\r\n    start, error,\r\n    res => {\r\n        mockRegisterFromDistributionCenterToStore({\r\n        packageID: req.packageID,\r\n        storeID: randomStore(),\r\n        dateofDelivery: '2020-02-29'\r\n        }, () => {}, error, success);\r\n        success(res);\r\n    }\r\n);\r\n\r\nconst mockRegisterPackage = (req, start, error, success, repeat = 1) => postData(\r\n  '/api/registerPackage',\r\n  { ...req },\r\n  () => {\r\n    // Multiple packages registered at once\r\n    if (repeat > 1) {\r\n        setTimeout(() => mockRegisterPackage({\r\n            packageID: uuid('P'),\r\n            batchID: req.batchID\r\n        }, start, error, success, repeat - 1), 200);\r\n    }\r\n    start();\r\n  },\r\n  error,\r\n  res => {\r\n    mockRegisterFromPackageHouseToDistributionCenter({\r\n      packageID: req.packageID,\r\n      distributionCenterID: uuid('DC'),\r\n      dateOfDistribution: '2020-02-25'\r\n    }, start, error, success);\r\n    success(res);\r\n  }\r\n);\r\n\r\nconst mockRegisterFoodFromFarmToPackageHouse = (req, start, error, success) => postData(\r\n  '/api/registerFoodFromFarmToPackageHouse',\r\n  { ...req },\r\n  start,  error,\r\n  res => {\r\n    mockRegisterPackage({\r\n      packageID: uuid('P'),\r\n      batchID: req.batchID\r\n    }, start, error, success, 5);\r\n    success(res);\r\n  }\r\n);\r\n\r\nconst mockRegisterBatch = (req, start, error, success) => postData(\r\n    '/api/registerBatch',\r\n    { ...req },\r\n    start, error,\r\n    res => {\r\n      mockRegisterFoodFromFarmToPackageHouse({\r\n        batchID: req.batchID, \r\n        dateOfPacking: '2020-02-20',\r\n        packagingHouseID: uuid('PH'),\r\n      }, start, error, success);\r\n      success(res);\r\n    }\r\n  );\r\n\r\nexport const registerBatchAndMockChain = (request, update) => {\r\n    const start = () => {};\r\n    const error = ({ error }) => update({ error });\r\n    const success = ({ status }) => update({ result: status });\r\n\r\n    mockRegisterBatch(request, start, error, success);\r\n}\r\n\r\nexport const getMockedFruits = updateStatus => {\r\n  updateStatus({loading: true, error: null, result: null})\r\n  setTimeout(() => updateStatus({loading: false, error: null, result: mockedFruits}), 500);\r\n}\r\n\r\nexport const getMockedPackages = updateStatus => {\r\n  updateStatus({loading: true, error: null, result: null})\r\n  setTimeout(() => updateStatus({loading: false, error: null, result: mockedPackages}), 500);\r\n}\r\n\r\nexport const getMockedItem = updateStatus => {\r\n  updateStatus({loading: true, error: null, result: null})\r\n  setTimeout(() => updateStatus({loading: false, error: null, result: mockedPackages[0]}), 500);\r\n}","import { postData, getData } from '../requests/requests';\r\nimport { \r\n  registerBatchAndMockChain,\r\n  getMockedFruits,\r\n  getMockedPackages, \r\n  getMockedItem \r\n} from './mockChain';\r\n\r\nexport const registerBatch = (req, updateStatus) => {\r\n  if (window.location.port === '3000') {\r\n    // Perform mock if in developing server\r\n    registerBatchAndMockChain(req, updateStatus);\r\n  } else {\r\n    postData(\r\n      '/api/registerBatch',\r\n      { ...req },\r\n      () => updateStatus({loading: true, error: null, result: null}),\r\n      ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n      ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n    );\r\n  }\r\n};\r\n\r\nexport const registerFoodFromFarmToPackageHouse = (req, updateStatus) => {\r\n  postData(\r\n    '/api/registerFoodFromFarmToPackageHouse',\r\n    { ...req },\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const registerPackage = (req, updateStatus) => {\r\n  postData(\r\n    '/api/registerPackage',\r\n    { ...req },\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const registerFromPackageHouseToDistributionCenter = (req, updateStatus) => {\r\n  postData(\r\n    '/api/registerFromPackageHouseToDistributionCenter',\r\n    { ...req },\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const registerFromDistributionCenterToStore = (req, updateStatus) => {\r\n  postData(\r\n    '/api/registerFromDistributionCenterToStore',\r\n    { ...req },\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const getItem = (itemID, updateStatus) => {\r\n  if (window.location.port === '3000') {\r\n    getMockedItem(updateStatus);\r\n  } else {\r\n    getData(\r\n      `/api/getItem/${itemID}`,\r\n      () => updateStatus({loading: true, error: null, result: null}),\r\n      ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n      ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n    );\r\n  }\r\n};\r\n\r\nexport const getPackages = updateStatus => {\r\n  if (window.location.port === '3000') {\r\n    getMockedPackages(updateStatus);\r\n  } else {\r\n    getData(\r\n      '/api/getPackages',\r\n      () => updateStatus({loading: true, error: null, result: null}),\r\n      ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n      ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n    );\r\n  }\r\n};\r\n\r\nexport const getFruits = updateStatus => {\r\n  if (window.location.port === '3000') {\r\n    getMockedFruits(updateStatus);\r\n  } else {\r\n    getData(\r\n      '/api/fruit/',\r\n      () => updateStatus({loading: true, error: null, result: null}),\r\n      ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n      ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n    );\r\n  }\r\n};\r\n\r\nexport const getFruit = (fruitID, updateStatus) => {\r\n  getData(\r\n    `/api/fruit/${fruitID}`,\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport style from './message.module.css';\r\n\r\nconst Message = ({ title, message, className }) => (\r\n    <div className={classNames(style.message, className)}>\r\n        {title && <h4>{title}</h4>}\r\n        {message && <p>{message}</p>}\r\n    </div>\r\n);\r\n\r\nMessage.propTypes = {\r\n    className: PropTypes.string,\r\n    title: PropTypes.string,\r\n    message: PropTypes.string\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Message from './Message';\r\nimport style from './message.module.css';\r\n\r\nconst SuccessMessage = ({ title, message }) => (\r\n    <Message className={style.success} title={title} message={message} />\r\n);\r\n\r\n\r\nSuccessMessage.propTypes = {\r\n    title: PropTypes.string,\r\n    message: PropTypes.string\r\n};\r\n\r\nexport default SuccessMessage;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Message from './Message';\r\nimport style from './message.module.css';\r\n\r\nconst ErrorMessage = ({ title, message }) => (\r\n    <Message className={style.error} title={title} message={message} />\r\n);\r\n\r\nErrorMessage.propTypes = {\r\n    title: PropTypes.string,\r\n    message: PropTypes.string\r\n};\r\n\r\nexport default ErrorMessage;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\nimport style from './dropdown.module.css';\r\nimport { useDropdown } from './useDropdown';\r\n\r\nconst Dropdown = (\r\n    { \r\n        id, \r\n        label, \r\n        name, \r\n        required,\r\n        disabled,\r\n        elements,\r\n        errorMessage, \r\n        className\r\n    }\r\n) => {\r\n    const [{value, description}, setElement] = useDropdown(elements[0] || {});\r\n    const [display, setDisplay] = useState(false);\r\n\r\n    const select = element => {\r\n        setDisplay(false);\r\n        setElement(element);\r\n    }\r\n\r\n    return (\r\n        <div className={classNames(style.container, className)}>\r\n            <div className={style.dropdown}>\r\n                <button \r\n                    type=\"button\"\r\n                    id={id}\r\n                    disabled={disabled}\r\n                    onClick={() => setDisplay(!display)}\r\n                >{description}\r\n                <FontAwesomeIcon icon={display ? faCaretUp : faCaretDown} size=\"2x\" className={style.caret}/>\r\n                </button>    \r\n                {display && (\r\n                    <div className={style.list}> \r\n                        {\r\n                            elements.map(element => (\r\n                                <button \r\n                                    key={element.value}\r\n                                    type=\"button\" \r\n                                    onClick={() => select(element)}\r\n                                >\r\n                                    {element.description}\r\n                                </button>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <input\r\n                className={style.input}\r\n                required={required} \r\n                type=\"hidden\" \r\n                name={name}\r\n                value={value}\r\n                readOnly\r\n            />\r\n            <div className={style.error}>{errorMessage}</div>\r\n            {label && (\r\n                <label className={style.label} htmlFor={id}>{label}</label>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nDropdown.defaultProps = {\r\n    type: 'text'\r\n};\r\n\r\nDropdown.propTypes = {\r\n    id: PropTypes.string, \r\n    label: PropTypes.string, \r\n    name: PropTypes.string, \r\n    required: PropTypes.bool,\r\n    disabled: PropTypes.bool, \r\n    elements: PropTypes.arrayOf(PropTypes.shape({\r\n        description: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n    })),\r\n    errorMessage: PropTypes.string, \r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Dropdown;","import { useState, useEffect } from 'react';\r\n\r\n\r\nexport const useDropdown = (defaultElement = {}) => {\r\n    const { description: defaultDescription, value: defaultValue } = defaultElement;\r\n    const [description, setDescription] = useState(defaultDescription);\r\n    const [value, setValue] = useState(defaultValue);\r\n    \r\n    const setElement = element => {\r\n        setDescription(element.description);\r\n        setValue(element.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setElement(defaultElement);\r\n    }, [defaultElement])\r\n\r\n    return [{value, description}, setElement];\r\n};","import { useEffect, useState } from 'react';\r\n\r\n/**\r\n * Updates variables with the status of an request\r\n * @param {*} defaultStatus \r\n * @returns [{loading, error, result, status}, updateStatus]\r\n */\r\nexport const useStatus = (defaultStatus = {}) => {\r\n  const [loading, setLoading] = useState(defaultStatus.loading || false);\r\n  const [error, setError] = useState(defaultStatus.error);\r\n  const [result, setResult] = useState(defaultStatus.result);\r\n  const [status, setStatus] = useState(defaultStatus.status);\r\n  \r\n  const updateStatus = (status) => {\r\n    setLoading(status.loading);\r\n    setError(status.error);\r\n    setResult(status.result);\r\n    setStatus(status.status);\r\n  }\r\n\r\n  return [{loading, error, result, status}, updateStatus];\r\n};\r\n\r\n/**\r\n * Excecutes an request and returns the result\r\n * @param {*} request \r\n * @param {*} arguments \r\n * @returns [{loading, error, result, status}, updateStatus]\r\n */\r\nexport const useRequest = (request, params) => {\r\n    const [{loading, error, result, status}, updateStatus] = useStatus()\r\n\r\n    useEffect(() => {\r\n        request(updateStatus, params);\r\n      }, []);\r\n\r\n    return {result, loading, error, status};\r\n};\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTractor } from '@fortawesome/free-solid-svg-icons'\r\nimport Form from '../components/form/Form';\r\nimport Input from '../components/form/input/Input';\r\nimport Card from '../components/card/Card';\r\nimport { registerBatch, getFruits } from '../blockchain/requests';\r\nimport SuccessMessage from '../components/message/SuccessMessage';\r\nimport ErrorMessage from '../components/message/ErrorMessage';\r\nimport uuid from '../uuid/uuid';\r\nimport style from './farm.module.css';\r\nimport Dropdown from '../components/form/dropdown/Dropdown';\r\nimport { useRequest, useStatus } from '../requests/hooks';\r\n\r\nconst Farm = () => {\r\n  const [request, updateStatus] = useStatus()\r\n  const fruits = useRequest(getFruits);\r\n  const handleSubmit = req => registerBatch(req, updateStatus);\r\n\r\n  const elements = fruits.result ? fruits.result.map(({ name, foodID }) => ({ description: name, value: foodID })) : [];\r\n\r\n  return (\r\n    <Card className={style.farm}>\r\n      <FontAwesomeIcon icon={faTractor} size=\"6x\"/>\r\n      <h1>FruitFarm</h1>\r\n      <Form onSubmit={handleSubmit}>\r\n      {request.error && <ErrorMessage title={request.status} messsage={request.error} />}\r\n      {request.result && <SuccessMessage title={request.status} message={request.result} />}\r\n        <Input \r\n          className={style.id}\r\n          id=\"farmID\"\r\n          name=\"farmID\"\r\n          label=\"Farm-id\" \r\n          defaultValue={uuid('F')}\r\n          errorMessage=\"Du må gi gården en id.\" \r\n          required\r\n          disabled={request.loading}\r\n        />\r\n        <Input \r\n          className={style.id}\r\n          id=\"batchID\" \r\n          name=\"batchID\"\r\n          label=\"Batch-id\"\r\n          defaultValue={uuid('B')}\r\n          errorMessage=\"Du må gi batchen en id.\"\r\n          required\r\n          disabled={request.loading}  \r\n        />\r\n        <Dropdown \r\n          id=\"foodID\" \r\n          name=\"foodID\"\r\n          label=\"Food type\"\r\n          elements={elements}\r\n          required\r\n          disabled={request.loading || fruits.loading}\r\n        />\r\n        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\r\n          <Input \r\n            id=\"lotNo1\" \r\n            label=\"Lot\"\r\n            name=\"lotNo\"\r\n            type=\"radio\"\r\n            description=\"Søndre\"\r\n            value=\"lotSouth\"\r\n            disabled={request.loading}\r\n            required\r\n          />\r\n          <Input \r\n            id=\"lotNo2\" \r\n            name=\"lotNo\"\r\n            type=\"radio\"\r\n            description=\"Nordre\"\r\n            value=\"lotNorth\"\r\n            disabled={request.loading}\r\n          />\r\n          <Input \r\n            id=\"lotNo3\" \r\n            name=\"lotNo\"\r\n            type=\"radio\"\r\n            description=\"Østre\"\r\n            value=\"lotEast\"\r\n            disabled={request.loading}\r\n          />\r\n          <Input \r\n            id=\"lotNo4\" \r\n            name=\"lotNo\"\r\n            type=\"radio\"\r\n            description=\"Vestre\"\r\n            value=\"lotWest\"\r\n            disabled={request.loading}\r\n          />\r\n        </div>\r\n        <Input \r\n          id=\"dateOfHarvest\" \r\n          label=\"Harverest date\"\r\n          name=\"dateOfHarvest\"\r\n          type=\"date\"\r\n          defaultValue=\"2020-02-10\"\r\n          disabled={request.loading}\r\n        />\r\n        <Input \r\n          type=\"submit\"\r\n          value=\"Go\"\r\n          disabled={request.loading}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Farm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport classNames from 'classnames';\r\nimport style from './event.module.css';\r\n\r\nconst Event = ({ timestamp, description, image, className}) => (\r\n    <div className={classNames(style.container, className)}>\r\n        <h3>{moment(timestamp).format('DD.MM.YYYY (HH:mm)')}</h3>\r\n        <p>{description}</p>\r\n        {image && <img src={image} className={style.image} />}\r\n    </div>\r\n);\r\n\r\nEvent.propTypes = {\r\n    timestamp: PropTypes.string,\r\n    name: PropTypes.string,\r\n    image: PropTypes.string\r\n};\r\n\r\nexport default Event;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Arrow = ({ className }) => <FontAwesomeIcon className={className} icon={faArrowDown} size=\"2x\" />;\r\n\r\nArrow.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Arrow;","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Event from './event/Event';\r\nimport Arrow from './arrow/Arrow';\r\nimport style from './history.module.css';\r\n\r\nconst History = ({ events }) => (\r\n    <div>\r\n        <h2>From farm to table</h2>\r\n        <p>What is your FOOD's story?</p>\r\n        <div className={style.history}>\r\n            {events.map(({timestamp, description, image}, index) => (\r\n                <Fragment  key={timestamp}>\r\n                    {(index !== 0) && <Arrow />}\r\n                    <Event timestamp={timestamp} description={description} image={image}/>\r\n                </Fragment>\r\n            ))}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nHistory.propTypes = {\r\n    events: PropTypes.arrayOf(PropTypes.shape({\r\n        timestamp: PropTypes.string,\r\n        description: PropTypes.string,\r\n        image: PropTypes.string\r\n    }))\r\n};\r\n\r\nexport default History;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from '../packages.module.css';\r\n\r\nconst Package = ({ packageID, onClick }) => (\r\n    <button \r\n        className={style.package}\r\n        onClick={() => onClick(packageID)}    \r\n    >\r\n        {packageID}\r\n    </button>\r\n);\r\n\r\nPackage.propTypes = {\r\n    packageID: PropTypes.string,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default Package;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Package from './package/package';\r\nimport style from './packages.module.css';\r\n\r\nconst Packages = ({ packages, onClick }) => {\r\n    if (!packages) return null;\r\n\r\n    return (\r\n        <div className={style.packages}>\r\n            {packages.map(({ packageID }) => <Package key={packageID} packageID={packageID} onClick={onClick} />)}\r\n        </div>\r\n    );\r\n};\r\n\r\nPackages.propTypes = {\r\n    packages: PropTypes.array,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default Packages;","const resposponseToEvents = (response, fruits) => {\r\n    const events = [];\r\n    if (!(response && fruits)) return events;\r\n\r\n    const fruit = fruits.find(f => f.foodID === response.foodID);\r\n\r\n    if (response.dateOfHarvest) {\r\n      events.push({\r\n        timestamp: response.dateOfHarvest,\r\n        description: `Your ${fruit.name} was harvested at farm ${response.farmID} ` + \r\n        `on lot ${response.lotNo} alongside many others in batch ${response.batchID}!`\r\n      })\r\n    }\r\n    if (response.dateOfPackaging) {\r\n      events.push({\r\n        timestamp: response.dateOfPackaging,\r\n        description: `It was soon packaged at packaging house ${response.packagingHouseID}.`\r\n      })\r\n    }\r\n    if (response.dateOfDistribution) {\r\n      events.push({\r\n        timestamp: response.dateOfDistribution,\r\n        description: `Your ${fruit.name} reached distribution center ${response.distributionCenterID} and shipped to the store.`\r\n      })\r\n    }\r\n    if (response.dateOfDelivery) {\r\n      events.push({\r\n        timestamp: response.dateOfDelivery,\r\n        image: fruit.image,\r\n        description: `Was delivered to this EcoStore (${response.storeID}) and is now in your hand! \\n` + \r\n        `Enjoy your fresh ${fruit.name}, knowing it has had a safe and tracable trip.`\r\n      })\r\n    }\r\n    return events;\r\n  }\r\n\r\n  export default resposponseToEvents;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faStoreAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport style from './ecoStore.module.css';\r\nimport Form from '../components/form/Form';\r\nimport Input from '../components/form/input/Input';\r\nimport History from './history/History';\r\nimport Card from '../components/card/Card';\r\nimport SuccessMessage from '../components/message/SuccessMessage';\r\nimport ErrorMessage from '../components/message/ErrorMessage';\r\nimport { getItem, getPackages, getFruits } from '../blockchain/requests';\r\nimport Packages from './packages/packages';\r\nimport { useRequest, useStatus } from '../requests/hooks';\r\nimport resposponseToEvents from './responseToEvents';\r\n\r\nconst EcoStore = () => {  \r\n  const fruits = useRequest(getFruits);\r\n  const pkgs = useRequest(getPackages);\r\n  const [pkg, updatePackageStatus] = useStatus({});\r\n  const [pkgID, setPackageID] = useState('');\r\n  \r\n  const handleSubmit = req => getItem(req.packageID, updatePackageStatus);\r\n  \r\n  return (\r\n    <div>\r\n      <header className={style.background}>\r\n        <Packages \r\n          packages={pkgs.result} \r\n          onClick={setPackageID} \r\n        />\r\n        <Card>\r\n          <FontAwesomeIcon icon={faStoreAlt} size=\"6x\"/>\r\n          <h1>EcoStore</h1>\r\n          <Form onSubmit={handleSubmit}>\r\n          {pkg.error && <ErrorMessage title={pkg.status} messsage={pkg.error} />}\r\n          {pkg.result && <SuccessMessage title={pkg.status} />}\r\n            <Input \r\n              id=\"packageID\"\r\n              name=\"packageID\"\r\n              label=\"Package-Id\" \r\n              defaultValue={pkgID} \r\n              onChange={e => setPackageID(e.target.value)}\r\n              disabled={pkg.loading}\r\n            />\r\n            <Input \r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n              disabled={pkg.loading}\r\n            />\r\n          </Form>\r\n          <History events={resposponseToEvents(pkg.result, fruits.result)} />\r\n        </Card>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EcoStore;\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route\r\n} from 'react-router-dom';\r\nimport './App.css';\r\nimport Farm from './farm/Farm';\r\nimport EcoStore from './ecoStore/EcoStore';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <header className=\"background\">\r\n        <Router>\r\n          <Route path=\"/fruitfarm\"><Farm /></Route>\r\n          <Route path=\"/ecostore\"><EcoStore /></Route>\r\n        </Router>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}