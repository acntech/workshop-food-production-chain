{"version":3,"sources":["components/form/dropdown/dropdown.module.css","components/message/message.module.css","components/form/input/input.module.css","ecoStore/packages/packages.module.css","farm/farm.module.css","components/card/card.module.css","ecoStore/ecoStore.module.css","ecoStore/history/event/event.module.css","ecoStore/history/history.module.css","serviceWorker.js","components/form/Form.js","components/form/input/Input.js","components/card/Card.js","requests/requests.js","uuid/uuid.js","blockchain/mockChain.js","components/message/Message.js","components/message/SuccessMessage.js","components/message/ErrorMessage.js","requests/useStatus.js","components/form/dropdown/Dropdown.js","components/form/dropdown/useDropdown.js","farm/Farm.js","blockchain/requests.js","ecoStore/history/event/Event.js","ecoStore/history/arrow/Arrow.js","ecoStore/history/History.js","ecoStore/packages/package/package.js","ecoStore/packages/packages.js","ecoStore/EcoStore.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","mapInput","type","name","value","checked","Form","onSubmit","children","e","preventDefault","form","inputs","querySelectorAll","result","forEach","i","mapForm","target","defaultProps","Input","id","label","required","disabled","readOnly","placeholder","defaultValue","defaultChecked","description","errorMessage","className","classNames","style","container","input","error","htmlFor","Card","card","postData","endpoint","body","start","success","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","JSON","stringify","then","res","json","err","getData","shortId","ShortUniqueId","uuid","prefix","randomUUID","setTimeout","status","stores","Array","map","mockRegisterFromPackageHouseToDistributionCenter","req","mockRegisterFromDistributionCenterToStore","packageID","storeID","Math","floor","random","length","dateofDelivery","mockRegisterFoodFromFarmToPackageHouse","mockRegisterPackage","repeat","batchID","distributionCenterID","dateOfDistribution","registerBatchAndMockChain","request","update","dateOfPacking","packagingHouseID","mockRegisterBatch","Message","title","message","SuccessMessage","ErrorMessage","useStatus","defaultStatus","useState","loading","setLoading","setError","setResult","setStatus","updateStatus","Dropdown","elements","defaultElement","defaultDescription","setDescription","setValue","setElement","element","useEffect","useDropdown","display","setDisplay","dropdown","onClick","icon","faCaretUp","faCaretDown","size","caret","list","key","select","Farm","batchStatus","updateBatchStatus","fruits","updateFruitStatus","fruitID","farm","faTractor","port","registerBatch","messsage","flexDirection","justifyContent","Event","timestamp","moment","format","Arrow","faArrowDown","History","events","history","index","Package","package","Packages","packageIDs","packages","resposponseToEvents","response","dateOfHarvest","push","farmID","lotNo","dateOfPackaging","dateOfDelivery","EcoStore","idStatus","updateIdStatus","updatePackageStatus","setPackageID","background","faStoreAlt","itemID","onChange","App","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,MAAQ,wBAAwB,MAAQ,wBAAwB,SAAW,2BAA2B,MAAQ,wBAAwB,KAAO,yB,mBCAvMD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,MAAQ,yB,mBCAhGD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,MAAQ,qBAAqB,MAAQ,uB,mBCAzHD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,4B,mBCAlED,EAAOC,QAAU,CAAC,GAAK,mB,mBCAvBD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,WAAa,6BAA6B,KAAO,uBAAuB,OAAS,2B,mBCAnGD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,QAAU,2B,gKCWRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iECHAC,EAAW,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACnC,OAAOH,GACH,IAAK,WACD,OAAO,eAAGC,EAAOE,EAAUD,EAAQ,MACvC,IAAK,QACD,OAAOC,EAAO,eAAMF,EAAOC,GAAU,KACzC,IAAK,SACD,MAAO,GACX,QACI,OAAO,eAAID,EAAOC,KAIxBE,EAAO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAOtB,OACI,0BAAMD,SANK,SAAAE,GACXA,EAAEC,iBACFH,EA7BQ,SAAAI,GACZ,IAAMC,EAASD,EAAKE,iBAAiB,SAEjCC,EAAS,GAMb,OAJAF,EAAOG,SAAQ,SAAAC,GACXF,EAAM,eAAOA,EAAP,GAAkBb,EAASe,OAG9BF,EAoBMG,CAAQR,EAAES,WAKdV,IAKbF,EAAKa,aAAe,CAChBZ,SAAU,cAQCD,Q,iCC9CTc,EAAQ,SAAC,GAiBT,IAfEC,EAeH,EAfGA,GACAnB,EAcH,EAdGA,KACAoB,EAaH,EAbGA,MACAnB,EAYH,EAZGA,KACAoB,EAWH,EAXGA,SACAC,EAUH,EAVGA,SACAC,EASH,EATGA,SACAC,EAQH,EARGA,YACAtB,EAOH,EAPGA,MACAuB,EAMH,EANGA,aACAC,EAKH,EALGA,eACAC,EAIH,EAJGA,YACAC,EAGH,EAHGA,aACAC,EAEH,EAFGA,UAIJ,OACI,yBAAKA,UAAWC,IAAWC,IAAMC,UAAWH,IACxC,2BACIA,UAAWE,IAAME,MACjBZ,SAAUA,EACVrB,KAAMA,EACNmB,GAAIA,EACJlB,KAAMA,EACNwB,aAAcA,EACdD,YAAaA,EACbE,eAAgBA,EAChBJ,SAAUA,EACVpB,MAAOA,EACPqB,SAAUA,IAEbI,GAAe,6BAAMA,GACtB,yBAAKE,UAAWE,IAAMG,OAAQN,GAC7BR,GACG,2BAAOS,UAAWE,IAAMX,MAAOe,QAAShB,GAAKC,KAM7DF,EAAMD,aAAe,CACjBjB,KAAM,QAoBKkB,Q,iBCrDAkB,EAXF,SAAC,GAAD,IAAG9B,EAAH,EAAGA,SAAUuB,EAAb,EAAaA,UAAb,OACT,yBAAKA,UAAWC,IAAWC,IAAMM,KAAMR,IAClCvB,ICPIgC,EAAW,SAACC,EAAUC,EAAMC,EAAOP,EAAOQ,GACnDD,IAEAE,MAAMJ,EAAU,CACZK,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAGlBC,SAAU,SACVC,eAAgB,cAChBV,KAAMW,KAAKC,UAAUZ,KAEvBa,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAM,SAAAC,GAAG,OAAIZ,EAAQY,MAAM,SAAAE,GAAG,OAAItB,EAAMsB,OAGjCC,EAAU,SAAClB,EAAUE,EAAOP,EAAOQ,GAC5CD,IAEAE,MAAMJ,EAAU,CACZK,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAGlBC,SAAU,SACVC,eAAgB,gBAElBG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAM,SAAAC,GAAG,OAAIZ,EAAQY,MAAM,SAAAE,GAAG,OAAItB,EAAMsB,O,QCnCxCE,EAAU,I,OAAIC,GAGLC,EAFF,SAAAC,GAAM,OAAIA,EAAS,IAAMH,EAAQI,WAAW,ICAnDxB,EAAW,SAACC,EAAUC,EAAMC,EAAOP,EAAOQ,GAC5CD,IACAsB,YAAW,kBAAMrB,EAAQ,CAAEsB,OAAQ,QAAUzB,MAAa,OAGxD0B,EAAS,IAAIC,MAAM,GAAGC,KAAI,SAAArD,GAAC,OAAI8C,EAAK,QASpCQ,EAAmD,SAACC,EAAK5B,EAAOP,EAAOQ,GAApB,OAAgCJ,EACrF,oDAD6F,eAExF+B,GACL5B,EAAOP,GACP,SAAAoB,IAV8C,SAACe,EAAK5B,EAAOP,EAAOQ,GAAYJ,EAC9E,6CADsF,eAEjF+B,GACL5B,EAAOP,EAAOQ,GAQV4B,CAA0C,CAC1CC,UAAWF,EAAIE,UACfC,QAfkBP,EAAOQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAOW,SAgB3DC,eAAgB,eACb,cAAU3C,EAAOQ,GACpBA,EAAQY,OA4BVwB,EAAyC,SAACT,EAAK5B,EAAOP,EAAOQ,GAApB,OAAgCJ,EAC7E,0CADqF,eAEhF+B,GACL5B,EAAQP,GACR,SAAAoB,IA5B0B,SAAtByB,EAAuBV,EAAK5B,EAAOP,EAAOQ,GAApB,IAA6BsC,EAA7B,uDAAsC,EAAtC,OAA4C1C,EACtE,uBAD8E,eAEzE+B,IACL,WAEMW,EAAS,GACTjB,YAAW,kBAAMgB,EAAoB,CACjCR,UAAWX,EAAK,KAChBqB,QAASZ,EAAIY,SACdxC,EAAOP,EAAOQ,EAASsC,EAAS,KAAI,KAE3CvC,MAEFP,GACA,SAAAoB,GACEc,EAAiD,CAC/CG,UAAWF,EAAIE,UACfW,qBAAsBtB,EAAK,MAC3BuB,mBAAoB,cACnB1C,EAAOP,EAAOQ,GACjBA,EAAQY,MASRyB,CAAoB,CAClBR,UAAWX,EAAK,KAChBqB,QAASZ,EAAIY,SACZxC,EAAOP,EAAOQ,EAAS,GAC1BA,EAAQY,OA0BG8B,EARmB,SAACC,EAASC,IAdlB,SAACjB,EAAK5B,EAAOP,EAAOQ,GAAYJ,EACtD,qBAD8D,eAEzD+B,GACL5B,EAAOP,GACP,SAAAoB,GACEwB,EAAuC,CACrCG,QAASZ,EAAIY,QACbM,cAAe,aACfC,iBAAkB5B,EAAK,OACtBnB,EAAOP,EAAOQ,GACjBA,EAAQY,MASVmC,CAAkBJ,GAJJ,eACA,gBAAGnD,EAAH,EAAGA,MAAH,OAAeoD,EAAO,CAAEpD,aACtB,SAAC,GAAD,IAAG8B,EAAH,EAAGA,OAAH,OAAgBsB,EAAO,CAAE1E,OAAQoD,Q,iBClEtC0B,EAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAS/D,EAAnB,EAAmBA,UAAnB,OACZ,yBAAKA,UAAWC,IAAWC,IAAM6D,QAAS/D,IACrC8D,GAAS,4BAAKA,GACdC,GAAW,2BAAIA,KCOTC,EAVQ,SAAC,GAAD,IAAGF,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACnB,kBAAC,EAAD,CAAS/D,UAAWE,IAAMW,QAASiD,MAAOA,EAAOC,QAASA,KCQ/CE,EATM,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACjB,kBAAC,EAAD,CAAS/D,UAAWE,IAAMG,MAAOyD,MAAOA,EAAOC,QAASA,KCY7CG,EAhBG,WAAyB,IAAxBC,EAAuB,uDAAP,GAAO,EACRC,mBAASD,EAAcE,UAAW,GAD1B,mBAC/BA,EAD+B,KACtBC,EADsB,OAEZF,mBAASD,EAAc9D,OAFX,mBAE/BA,EAF+B,KAExBkE,EAFwB,OAGVH,mBAASD,EAAcpF,QAHb,mBAG/BA,EAH+B,KAGvByF,EAHuB,OAIVJ,mBAASD,EAAchC,QAJb,mBAI/BA,EAJ+B,KAIvBsC,EAJuB,KAMlCC,EAAe,SAACvC,GACpBmC,EAAWnC,EAAOkC,SAClBE,EAASpC,EAAO9B,OAChBmE,EAAUrC,EAAOpD,QACjB0F,EAAUtC,EAAOA,SAGnB,MAAO,CAAC,CAACkC,UAAShE,QAAOtB,SAAQoD,UAASuC,I,kCCPtCC,EAAW,SAAC,GAWZ,IATErF,EASH,EATGA,GACAC,EAQH,EARGA,MACAnB,EAOH,EAPGA,KACAoB,EAMH,EANGA,SACAC,EAKH,EALGA,SACAmF,EAIH,EAJGA,SACA7E,EAGH,EAHGA,aACAC,EAEH,EAFGA,UAEH,EChBsB,WAA0B,IAAzB6E,EAAwB,uDAAP,GACpBC,EAA4CD,EAAzD/E,YAAwCF,EAAiBiF,EAAxBxG,MADO,EAEV+F,mBAASU,GAFC,mBAEzChF,EAFyC,KAE5BiF,EAF4B,OAGtBX,mBAASxE,GAHa,mBAGzCvB,EAHyC,KAGlC2G,EAHkC,KAK1CC,EAAa,SAAAC,GACfH,EAAeG,EAAQpF,aACvBkF,EAASE,EAAQ7G,QAOrB,OAJA8G,qBAAU,WACNF,EAAWJ,KACZ,CAACA,IAEG,CAAC,CAAC/E,cAAazB,SAAQ4G,GDGaG,CAAYR,EAAS,IAAM,IADrE,0BACOvG,EADP,EACOA,MAAOyB,EADd,EACcA,YAAcmF,EAD5B,OAE6Bb,oBAAS,GAFtC,mBAEMiB,EAFN,KAEeC,EAFf,KASD,OACI,yBAAKtF,UAAWC,IAAWC,IAAMC,UAAWH,IACxC,yBAAKA,UAAWE,IAAMqF,UAClB,4BACIpH,KAAK,SACLmB,GAAIA,EACJG,SAAUA,EACV+F,QAAS,kBAAMF,GAAYD,KAC7BvF,EACF,kBAAC,IAAD,CAAiB2F,KAAMJ,EAAUK,IAAYC,IAAaC,KAAK,KAAK5F,UAAWE,IAAM2F,SAEpFR,GACG,yBAAKrF,UAAWE,IAAM4F,MAEdlB,EAAStC,KAAI,SAAA4C,GAAO,OAChB,4BACIa,IAAKb,EAAQ7G,MACbF,KAAK,SACLqH,QAAS,kBAvB1B,SAAAN,GACXI,GAAW,GACXL,EAAWC,GAqBgCc,CAAOd,KAErBA,EAAQpF,kBAOjC,2BACIE,UAAWE,IAAME,MACjBZ,SAAUA,EACVrB,KAAK,SACLC,KAAMA,EACNC,MAAOA,EACPqB,UAAQ,IAEZ,yBAAKM,UAAWE,IAAMG,OAAQN,GAC7BR,GACG,2BAAOS,UAAWE,IAAMX,MAAOe,QAAShB,GAAKC,KAM7DoF,EAASvF,aAAe,CACpBjB,KAAM,QAiBKwG,QEyBAsB,EApGF,WAAO,IAAD,EACwB/B,IADxB,mBACVgC,EADU,KACGC,EADH,OAEuCjC,IAFvC,0BAETG,EAFS,EAETA,QAAiB+B,EAFR,EAEArH,OAAkBsH,EAFlB,KAKjBlB,qBAAU,WCkEa,IAAAT,IDjEX2B,ECkEZzE,EACE,eACA,kBAAM8C,EAAa,CAACL,SAAS,EAAMhE,MAAO,KAAMtB,OAAQ,UACxD,gBAAEoD,EAAF,EAAEA,OAAQ4B,EAAV,EAAUA,QAAV,OAAuBW,EAAa,CAACL,SAAS,EAAOhE,MAAO0D,EAAShF,OAAQ,KAAMoD,cACnF,gBAAEA,EAAF,EAAEA,OAAQpD,EAAV,EAAUA,OAAV,OAAsB2F,EAAa,CAACL,SAAS,EAAOhE,MAAO,KAAMtB,SAAQoD,gBDrExE,IAEH,IAAMyC,EAAWwB,EAASA,EAAO9D,KAAI,kBAAwB,CAAExC,YAA1B,EAAG1B,KAA0CC,MAA7C,EAASiI,YAAyD,GAEvG,OACE,kBAAC,EAAD,CAAMtG,UAAWE,IAAMqG,MACrB,kBAAC,IAAD,CAAiBd,KAAMe,IAAWZ,KAAK,OACvC,yCACA,kBAAC,EAAD,CAAMpH,SAZW,SAAAgE,GAAG,OCdG,SAACA,EAAKkC,GACJ,SAAzB5G,OAAOC,SAAS0I,KAElBlD,EAA0Bf,EAAKkC,GAE/BjE,EACE,qBADM,eAED+B,IACL,kBAAMkC,EAAa,CAACL,SAAS,EAAMhE,MAAO,KAAMtB,OAAQ,UACxD,gBAAEoD,EAAF,EAAEA,OAAQ4B,EAAV,EAAUA,QAAV,OAAuBW,EAAa,CAACL,SAAS,EAAOhE,MAAO0D,EAAShF,OAAQ,KAAMoD,cACnF,gBAAEA,EAAF,EAAEA,OAAQpD,EAAV,EAAUA,OAAV,OAAsB2F,EAAa,CAACL,SAAS,EAAOhE,MAAO,KAAMtB,SAAQoD,cDIjDuE,CAAclE,EAAK2D,KAa1CD,EAAY7F,OAAS,kBAAC,EAAD,CAAcyD,MAAOoC,EAAY/D,OAAQwE,SAAUT,EAAY7F,QACpF6F,EAAYnH,QAAU,kBAAC,EAAD,CAAgB+E,MAAOoC,EAAY/D,OAAQ4B,QAASmC,EAAYnH,SACrF,kBAAC,EAAD,CACEiB,UAAWE,IAAMZ,GACjBA,GAAG,SACHlB,KAAK,SACLmB,MAAM,UACNK,aAAcmC,EAAK,KACnBhC,aAAa,+BACbP,UAAQ,EACRC,SAAU4E,IAEZ,kBAAC,EAAD,CACErE,UAAWE,IAAMZ,GACjBA,GAAG,UACHlB,KAAK,UACLmB,MAAM,WACNK,aAAcmC,EAAK,KACnBhC,aAAa,6BACbP,UAAQ,EACRC,SAAU4E,IAEZ,kBAAC,EAAD,CACE/E,GAAG,SACHlB,KAAK,SACLmB,MAAM,YACNqF,SAAUA,EACVpF,UAAQ,EACRC,SAAU4E,IAEZ,yBAAKnE,MAAO,CAAEmF,QAAS,OAAQuB,cAAe,MAAOC,eAAgB,kBACnE,kBAAC,EAAD,CACEvH,GAAG,SACHC,MAAM,MACNnB,KAAK,QACLD,KAAK,QACL2B,YAAY,YACZzB,MAAM,WACNoB,SAAU4E,EACV7E,UAAQ,IAEV,kBAAC,EAAD,CACEF,GAAG,SACHlB,KAAK,QACLD,KAAK,QACL2B,YAAY,SACZzB,MAAM,WACNoB,SAAU4E,IAEZ,kBAAC,EAAD,CACE/E,GAAG,SACHlB,KAAK,QACLD,KAAK,QACL2B,YAAY,WACZzB,MAAM,UACNoB,SAAU4E,IAEZ,kBAAC,EAAD,CACE/E,GAAG,SACHlB,KAAK,QACLD,KAAK,QACL2B,YAAY,SACZzB,MAAM,UACNoB,SAAU4E,KAGd,kBAAC,EAAD,CACE/E,GAAG,gBACHC,MAAM,iBACNnB,KAAK,gBACLD,KAAK,OACLyB,aAAa,aACbH,SAAU4E,IAEZ,kBAAC,EAAD,CACElG,KAAK,SACLE,MAAM,KACNoB,SAAU4E,O,oDExFLyC,GAZD,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWjH,EAAd,EAAcA,YAAaE,EAA3B,EAA2BA,UAA3B,OACV,yBAAKA,UAAWC,IAAWC,KAAMC,UAAWH,IACxC,4BAAKgH,IAAOD,GAAWE,OAAO,uBAC9B,2BAAInH,KCCGoH,GAND,SAAC,GAAD,IAAGlH,EAAH,EAAGA,UAAH,OAAmB,kBAAC,IAAD,CAAiBA,UAAWA,EAAWyF,KAAM0B,IAAavB,KAAK,Q,oBCuBjFwB,GAtBC,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACZ,6BACI,kDACA,yDACA,yBAAKrH,UAAWE,KAAMoH,SACjBD,EAAO/E,KAAI,WAA2BiF,GAA3B,IAAER,EAAF,EAAEA,UAAWjH,EAAb,EAAaA,YAAb,OACR,kBAAC,WAAD,CAAWiG,IAAKgB,GACA,IAAVQ,GAAgB,kBAAC,GAAD,MAClB,kBAAC,GAAD,CAAOR,UAAWA,EAAWjH,YAAaA,W,oBCI/C0H,GAdC,SAAC,GAAD,IAAG9E,EAAH,EAAGA,UAAW8C,EAAd,EAAcA,QAAd,OACZ,4BACIxF,UAAWE,KAAMuH,QACjBjC,QAAS,kBAAMA,EAAQ9C,KAEtBA,ICWMgF,GAfE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,WAAYnC,EAAc,EAAdA,QAC5B,OAAKmC,EAGD,yBAAK3H,UAAWE,KAAM0H,UACjBD,EAAWrF,KAAI,SAAAhD,GAAE,OAAI,kBAAC,GAAD,CAASyG,IAAKzG,EAAIoD,UAAWpD,EAAIkG,QAASA,QAJhD,MCStBqC,GAAsB,SAAAC,GAC1B,IAAMT,EAAS,GACf,OAAKS,GAEDA,EAASC,eACXV,EAAOW,KAAK,CACVjB,UAAWe,EAASC,cACpBjI,YAAY,SAAD,OAAWgI,EAAS1E,QAApB,6BAAgD0E,EAASG,OAAzD,sBAA6EH,EAASI,SAGjGJ,EAASK,iBACXd,EAAOW,KAAK,CACVjB,UAAWe,EAASK,gBACpBrI,YAAY,mBAAD,OAAqBgI,EAASnE,oBAGzCmE,EAASxE,oBACX+D,EAAOW,KAAK,CACVjB,UAAWe,EAASxE,mBACpBxD,YAAY,sBAAD,OAAwBgI,EAASzE,wBAG5CyE,EAASM,gBACXf,EAAOW,KAAK,CACVjB,UAAWe,EAASM,eACpBtI,YAAY,oBAAD,OAAsBgI,EAASnF,WAGvC0E,GA1BeA,GAyETgB,GA5CE,WAAO,IAAD,EACcnE,IADd,mBACdoE,EADc,KACJC,EADI,OAE2CrE,IAF3C,0BAEbG,EAFa,EAEbA,QAAShE,EAFI,EAEJA,MAAOtB,EAFH,EAEGA,OAAQoD,EAFX,EAEWA,OAASqG,EAFpB,OAGapE,mBAASrC,EAAK,MAH3B,mBAGdW,EAHc,KAGH+F,EAHG,KAUrB,OAJAtD,qBAAU,WNwBe,IAAAT,IMvBX6D,ENwBd3G,EACE,oBACA,kBAAM8C,EAAa,CAACL,SAAS,EAAMhE,MAAO,KAAMtB,OAAQ,UACxD,gBAAEoD,EAAF,EAAEA,OAAQ4B,EAAV,EAAUA,QAAV,OAAuBW,EAAa,CAACL,SAAS,EAAOhE,MAAO0D,EAAShF,OAAQ,KAAMoD,cACnF,gBAAEA,EAAF,EAAEA,OAAQpD,EAAV,EAAUA,OAAV,OAAsB2F,EAAa,CAACL,SAAS,EAAOhE,MAAO,KAAMtB,SAAQoD,gBM3BxE,IAGD,6BACE,4BAAQnC,UAAWE,IAAMwI,YACvB,kBAAC,GAAD,CACEf,WAAYW,EAASvJ,OACrByG,QAASiD,IAEX,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAiBhD,KAAMkD,IAAY/C,KAAK,OACxC,wCACA,kBAAC,EAAD,CAAMpH,SAhBO,SAAAgE,GAAG,ONQFoG,EMRcpG,EAAIE,UNQVgC,EMRqB8D,ONSnD5G,EAAQ,gBAAD,OACWgH,IAChB,kBAAMlE,EAAa,CAACL,SAAS,EAAMhE,MAAO,KAAMtB,OAAQ,UACxD,gBAAEoD,EAAF,EAAEA,OAAQ4B,EAAV,EAAUA,QAAV,OAAuBW,EAAa,CAACL,SAAS,EAAOhE,MAAO0D,EAAShF,OAAQ,KAAMoD,cACnF,gBAAEA,EAAF,EAAEA,OAAQpD,EAAV,EAAUA,OAAV,OAAsB2F,EAAa,CAACL,SAAS,EAAOhE,MAAO,KAAMtB,SAAQoD,cALtD,IAACyG,EAAQlE,IMSrBrE,GAAS,kBAAC,EAAD,CAAcyD,MAAO3B,EAAQwE,SAAUtG,IAChDtB,GAAU,kBAAC,EAAD,CAAgB+E,MAAO3B,IAChC,kBAAC,EAAD,CACE7C,GAAG,YACHlB,KAAK,YACLmB,MAAM,aACNlB,MAAOqE,EACPmG,SAAU,SAAAnK,GAAC,OAAI+J,EAAa/J,EAAES,OAAOd,QACrCoB,SAAU4E,IAEZ,kBAAC,EAAD,CACElG,KAAK,SACLE,MAAM,SACNoB,SAAU4E,KAGd,kBAAC,GAAD,CAASgD,OAAQQ,GAAoB9I,SC7DhC+J,OAbf,WACE,OACE,6BACE,4BAAQ9I,UAAU,cAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+I,KAAK,cAAa,kBAAC,EAAD,OACzB,kBAAC,IAAD,CAAOA,KAAK,aAAY,kBAAC,GAAD,WCTlCC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,StB6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9H,MAAK,SAAA+H,GACjCA,EAAaC,kB","file":"static/js/main.9146d48c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"dropdown_container__2MuSb\",\"label\":\"dropdown_label__33c0v\",\"error\":\"dropdown_error__eEh7z\",\"dropdown\":\"dropdown_dropdown__3ROtb\",\"caret\":\"dropdown_caret__2dvhU\",\"list\":\"dropdown_list__OM9Ft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__2AbUU\",\"success\":\"message_success__2Azm2\",\"error\":\"message_error__3Rval\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"input_container__QAWrV\",\"label\":\"input_label__359Us\",\"error\":\"input_error__3S6Ie\",\"input\":\"input_input__2PZYz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packages\":\"packages_packages__1e7qv\",\"package\":\"packages_package__28v2U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"id\":\"farm_id__2xbTZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__39fDa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"ecoStore_background__39S5q\",\"card\":\"ecoStore_card__3aEfE\",\"events\":\"ecoStore_events__3Q4I0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"event_container__2nzHx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"history_history__fHQjv\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst mapForm = form => {\r\n    const inputs = form.querySelectorAll(\"input\");\r\n\r\n    let result = {};\r\n\r\n    inputs.forEach(i => {\r\n        result = {...result, ...mapInput(i)}\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nconst mapInput = ({ type, name, value, checked }) => {\r\n    switch(type) {\r\n        case \"checkbox\": \r\n            return { [name]: checked ? value : null }\r\n        case \"radio\": \r\n            return checked ? { [name]: value } : null;\r\n        case \"submit\":\r\n            return {};\r\n        default:\r\n            return  { [name]: value };\r\n    }   \r\n}\r\n\r\nconst Form = ({ onSubmit, children }) => {\r\n\r\n    const submit = e => {\r\n        e.preventDefault();   \r\n        onSubmit(mapForm(e.target));\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n            {children}\r\n        </form>\r\n    );\r\n};\r\n\r\nForm.defaultProps = {\r\n    onSubmit: () => {}\r\n}\r\n\r\nForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n    children: PropTypes.node\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport style from './input.module.css';\r\n\r\nconst Input = (\r\n    { \r\n        id, \r\n        type, \r\n        label, \r\n        name, \r\n        required,\r\n        disabled, \r\n        readOnly, \r\n        placeholder, \r\n        value, \r\n        defaultValue, \r\n        defaultChecked, \r\n        description, \r\n        errorMessage, \r\n        className\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div className={classNames(style.container, className)}>\r\n            <input\r\n                className={style.input}\r\n                required={required} \r\n                type={type} \r\n                id={id}\r\n                name={name}\r\n                defaultValue={defaultValue}\r\n                placeholder={placeholder}\r\n                defaultChecked={defaultChecked}\r\n                disabled={disabled}\r\n                value={value}\r\n                readOnly={readOnly}\r\n            />\r\n            {description && <div>{description}</div>}\r\n            <div className={style.error}>{errorMessage}</div>\r\n            {label && (\r\n                <label className={style.label} htmlFor={id}>{label}</label>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nInput.defaultProps = {\r\n    type: 'text'\r\n};\r\n\r\nInput.propTypes = {\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    type: PropTypes.string,\r\n    value: PropTypes.any,\r\n    label: PropTypes.node,\r\n    required: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    defaultValue: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    description: PropTypes.string,\r\n    errorMessage: PropTypes.string,\r\n    defaultChecked: PropTypes.bool,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport style from './card.module.css';\r\n\r\nconst Card = ({ children, className }) => (\r\n    <div className={classNames(style.card, className)}>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nCard.propTypes = {\r\n    children: PropTypes.node,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Card;","export const postData = (endpoint, body, start, error, success) => {\r\n    start();\r\n\r\n    fetch(endpoint, {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *client\r\n        body: JSON.stringify(body) // body data type must match \"Content-Type\" header\r\n      }\r\n    ).then(res => res.json())\r\n     .then( res => success(res), err => error(err) );\r\n};\r\n\r\nexport const getData = (endpoint, start, error, success) => {\r\n    start();\r\n\r\n    fetch(endpoint, {\r\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *client\r\n      }\r\n    ).then(res => res.json())\r\n     .then( res => success(res), err => error(err) );\r\n};\r\n","import ShortUniqueId from 'short-unique-id';\r\nconst shortId = new ShortUniqueId();\r\nconst uuid = prefix => prefix + '-' + shortId.randomUUID(6);\r\n\r\nexport default uuid;","import uuid from '../uuid/uuid';\r\n\r\nconst postData = (endpoint, body, start, error, success) => {\r\n    start();\r\n    setTimeout(() => success({ status: 'OK - ' + endpoint }), 1500);\r\n};\r\n  \r\nconst stores = new Array(1).map(i => uuid('S'));\r\nconst randomStore = () => stores[Math.floor(Math.random() * stores.length)];\r\n\r\nconst mockRegisterFromDistributionCenterToStore = (req, start, error, success) => postData(\r\n    '/api/registerFromDistributionCenterToStore',\r\n    { ...req },\r\n    start, error, success\r\n  );\r\n\r\nconst mockRegisterFromPackageHouseToDistributionCenter = (req, start, error, success) => postData(\r\n    '/api/registerFromPackageHouseToDistributionCenter',\r\n    { ...req },\r\n    start, error,\r\n    res => {\r\n        mockRegisterFromDistributionCenterToStore({\r\n        packageID: req.packageID,\r\n        storeID: randomStore(),\r\n        dateofDelivery: '2020-02-29'\r\n        }, () => {}, error, success);\r\n        success(res);\r\n    }\r\n);\r\n\r\nconst mockRegisterPackage = (req, start, error, success, repeat = 1) => postData(\r\n  '/api/registerPackage',\r\n  { ...req },\r\n  () => {\r\n    // Multiple packages registered at once\r\n    if (repeat > 1) {\r\n        setTimeout(() => mockRegisterPackage({\r\n            packageID: uuid('P'),\r\n            batchID: req.batchID\r\n        }, start, error, success, repeat - 1), 200);\r\n    }\r\n    start();\r\n  },\r\n  error,\r\n  res => {\r\n    mockRegisterFromPackageHouseToDistributionCenter({\r\n      packageID: req.packageID,\r\n      distributionCenterID: uuid('DC'),\r\n      dateOfDistribution: '2020-02-25'\r\n    }, start, error, success);\r\n    success(res);\r\n  }\r\n);\r\n\r\nconst mockRegisterFoodFromFarmToPackageHouse = (req, start, error, success) => postData(\r\n  '/api/registerFoodFromFarmToPackageHouse',\r\n  { ...req },\r\n  start,  error,\r\n  res => {\r\n    mockRegisterPackage({\r\n      packageID: uuid('P'),\r\n      batchID: req.batchID\r\n    }, start, error, success, 5);\r\n    success(res);\r\n  }\r\n);\r\n\r\nconst mockRegisterBatch = (req, start, error, success) => postData(\r\n    '/api/registerBatch',\r\n    { ...req },\r\n    start, error,\r\n    res => {\r\n      mockRegisterFoodFromFarmToPackageHouse({\r\n        batchID: req.batchID, \r\n        dateOfPacking: '2020-02-20',\r\n        packagingHouseID: uuid('PH'),\r\n      }, start, error, success);\r\n      success(res);\r\n    }\r\n  );\r\n\r\nconst registerBatchAndMockChain = (request, update) => {\r\n    const start = () => {};\r\n    const error = ({ error }) => update({ error });\r\n    const success = ({ status }) => update({ result: status });\r\n\r\n    mockRegisterBatch(request, start, error, success);\r\n}\r\n\r\nexport default registerBatchAndMockChain;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport style from './message.module.css';\r\n\r\nconst Message = ({ title, message, className }) => (\r\n    <div className={classNames(style.message, className)}>\r\n        {title && <h4>{title}</h4>}\r\n        {message && <p>{message}</p>}\r\n    </div>\r\n);\r\n\r\nMessage.propTypes = {\r\n    className: PropTypes.string,\r\n    title: PropTypes.string,\r\n    message: PropTypes.string\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Message from './Message';\r\nimport style from './message.module.css';\r\n\r\nconst SuccessMessage = ({ title, message }) => (\r\n    <Message className={style.success} title={title} message={message} />\r\n);\r\n\r\n\r\nSuccessMessage.propTypes = {\r\n    title: PropTypes.string,\r\n    message: PropTypes.string\r\n};\r\n\r\nexport default SuccessMessage;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Message from './Message';\r\nimport style from './message.module.css';\r\n\r\nconst ErrorMessage = ({ title, message }) => (\r\n    <Message className={style.error} title={title} message={message} />\r\n);\r\n\r\nErrorMessage.propTypes = {\r\n    title: PropTypes.string,\r\n    message: PropTypes.string\r\n};\r\n\r\nexport default ErrorMessage;","import { useState } from 'react';\r\n\r\nconst useStatus = (defaultStatus = {}) => {\r\n    const [loading, setLoading] = useState(defaultStatus.loading || false);\r\n    const [error, setError] = useState(defaultStatus.error);\r\n    const [result, setResult] = useState(defaultStatus.result);\r\n    const [status, setStatus] = useState(defaultStatus.status);\r\n    \r\n  const updateStatus = (status) => {\r\n    setLoading(status.loading);\r\n    setError(status.error);\r\n    setResult(status.result);\r\n    setStatus(status.status);\r\n  }\r\n\r\n  return [{loading, error, result, status}, updateStatus];\r\n}\r\n\r\nexport default useStatus;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\nimport style from './dropdown.module.css';\r\nimport { useDropdown } from './useDropdown';\r\n\r\nconst Dropdown = (\r\n    { \r\n        id, \r\n        label, \r\n        name, \r\n        required,\r\n        disabled,\r\n        elements,\r\n        errorMessage, \r\n        className\r\n    }\r\n) => {\r\n    const [{value, description}, setElement] = useDropdown(elements[0] || {});\r\n    const [display, setDisplay] = useState(false);\r\n\r\n    const select = element => {\r\n        setDisplay(false);\r\n        setElement(element);\r\n    }\r\n\r\n    return (\r\n        <div className={classNames(style.container, className)}>\r\n            <div className={style.dropdown}>\r\n                <button \r\n                    type=\"button\"\r\n                    id={id}\r\n                    disabled={disabled}\r\n                    onClick={() => setDisplay(!display)}\r\n                >{description}\r\n                <FontAwesomeIcon icon={display ? faCaretUp : faCaretDown} size=\"2x\" className={style.caret}/>\r\n                </button>    \r\n                {display && (\r\n                    <div className={style.list}> \r\n                        {\r\n                            elements.map(element => (\r\n                                <button \r\n                                    key={element.value}\r\n                                    type=\"button\" \r\n                                    onClick={() => select(element)}\r\n                                >\r\n                                    {element.description}\r\n                                </button>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <input\r\n                className={style.input}\r\n                required={required} \r\n                type=\"hidden\" \r\n                name={name}\r\n                value={value}\r\n                readOnly\r\n            />\r\n            <div className={style.error}>{errorMessage}</div>\r\n            {label && (\r\n                <label className={style.label} htmlFor={id}>{label}</label>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nDropdown.defaultProps = {\r\n    type: 'text'\r\n};\r\n\r\nDropdown.propTypes = {\r\n    id: PropTypes.string, \r\n    label: PropTypes.string, \r\n    name: PropTypes.string, \r\n    required: PropTypes.bool,\r\n    disabled: PropTypes.bool, \r\n    elements: PropTypes.arrayOf(PropTypes.shape({\r\n        description: PropTypes.string,\r\n        value: PropTypes.string\r\n    })),\r\n    errorMessage: PropTypes.string, \r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Dropdown;","import { useState, useEffect } from 'react';\r\n\r\n\r\nexport const useDropdown = (defaultElement = {}) => {\r\n    const { description: defaultDescription, value: defaultValue } = defaultElement;\r\n    const [description, setDescription] = useState(defaultDescription);\r\n    const [value, setValue] = useState(defaultValue);\r\n    \r\n    const setElement = element => {\r\n        setDescription(element.description);\r\n        setValue(element.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setElement(defaultElement);\r\n    }, [defaultElement])\r\n\r\n    return [{description, value}, setElement];\r\n};","import React, { useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTractor } from '@fortawesome/free-solid-svg-icons'\r\nimport Form from '../components/form/Form';\r\nimport Input from '../components/form/input/Input';\r\nimport Card from '../components/card/Card';\r\nimport { registerBatch, getFruits } from '../blockchain/requests';\r\nimport SuccessMessage from '../components/message/SuccessMessage';\r\nimport ErrorMessage from '../components/message/ErrorMessage';\r\nimport useStatus from '../requests/useStatus';\r\nimport uuid from '../uuid/uuid';\r\nimport style from './farm.module.css';\r\nimport Dropdown from '../components/form/dropdown/Dropdown';\r\n\r\nconst Farm = () => {\r\n  const [batchStatus, updateBatchStatus] = useStatus()\r\n  const [{loading, result: fruits }, updateFruitStatus] = useStatus()\r\n  const handleSubmit = req => registerBatch(req, updateBatchStatus);\r\n\r\n  useEffect(() => {\r\n    getFruits(updateFruitStatus);\r\n  }, []);\r\n  \r\n  const elements = fruits ? fruits.map(({ name, fruitID }) => ({ description: name, value: fruitID })) : [];\r\n\r\n  return (\r\n    <Card className={style.farm}>\r\n      <FontAwesomeIcon icon={faTractor} size=\"6x\"/>\r\n      <h1>FruitFarm</h1>\r\n      <Form onSubmit={handleSubmit}>\r\n      {batchStatus.error && <ErrorMessage title={batchStatus.status} messsage={batchStatus.error} />}\r\n      {batchStatus.result && <SuccessMessage title={batchStatus.status} message={batchStatus.result} />}\r\n        <Input \r\n          className={style.id}\r\n          id=\"farmID\"\r\n          name=\"farmID\"\r\n          label=\"Farm-id\" \r\n          defaultValue={uuid('F')}\r\n          errorMessage=\"Du må gi gården en id.\" \r\n          required\r\n          disabled={loading}\r\n        />\r\n        <Input \r\n          className={style.id}\r\n          id=\"batchID\" \r\n          name=\"batchID\"\r\n          label=\"Batch-id\"\r\n          defaultValue={uuid('B')}\r\n          errorMessage=\"Du må gi batchen en id.\"\r\n          required\r\n          disabled={loading}  \r\n        />\r\n        <Dropdown \r\n          id=\"foodID\" \r\n          name=\"foodID\"\r\n          label=\"Food type\"\r\n          elements={elements}\r\n          required\r\n          disabled={loading}\r\n        />\r\n        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\r\n          <Input \r\n            id=\"lotNo1\" \r\n            label=\"Lot\"\r\n            name=\"lotNo\"\r\n            type=\"radio\"\r\n            description=\"Søndre\"\r\n            value=\"lotSouth\"\r\n            disabled={loading}\r\n            required\r\n          />\r\n          <Input \r\n            id=\"lotNo2\" \r\n            name=\"lotNo\"\r\n            type=\"radio\"\r\n            description=\"Nordre\"\r\n            value=\"lotNorth\"\r\n            disabled={loading}\r\n          />\r\n          <Input \r\n            id=\"lotNo3\" \r\n            name=\"lotNo\"\r\n            type=\"radio\"\r\n            description=\"Østre\"\r\n            value=\"lotEast\"\r\n            disabled={loading}\r\n          />\r\n          <Input \r\n            id=\"lotNo4\" \r\n            name=\"lotNo\"\r\n            type=\"radio\"\r\n            description=\"Vestre\"\r\n            value=\"lotWest\"\r\n            disabled={loading}\r\n          />\r\n        </div>\r\n        <Input \r\n          id=\"dateOfHarvest\" \r\n          label=\"Harverest date\"\r\n          name=\"dateOfHarvest\"\r\n          type=\"date\"\r\n          defaultValue=\"2020-02-10\"\r\n          disabled={loading}\r\n        />\r\n        <Input \r\n          type=\"submit\"\r\n          value=\"Go\"\r\n          disabled={loading}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Farm;\r\n","import { postData, getData } from '../requests/requests';\r\nimport registerBatchAndMockChain from './mockChain';\r\n\r\nexport const registerBatch = (req, updateStatus) => {\r\n  if (window.location.port === '3000') {\r\n    // Perform mock if in developing server\r\n    registerBatchAndMockChain(req, updateStatus);\r\n  } else {\r\n    postData(\r\n      '/api/registerBatch',\r\n      { ...req },\r\n      () => updateStatus({loading: true, error: null, result: null}),\r\n      ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n      ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n    );\r\n  }\r\n};\r\n\r\nexport const registerFoodFromFarmToPackageHouse = (req, updateStatus) => {\r\n  postData(\r\n    '/api/registerFoodFromFarmToPackageHouse',\r\n    { ...req },\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const registerPackage = (req, updateStatus) => {\r\n  postData(\r\n    '/api/registerPackage',\r\n    { ...req },\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const registerFromPackageHouseToDistributionCenter = (req, updateStatus) => {\r\n  postData(\r\n    '/api/registerFromPackageHouseToDistributionCenter',\r\n    { ...req },\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const registerFromDistributionCenterToStore = (req, updateStatus) => {\r\n  postData(\r\n    '/api/registerFromDistributionCenterToStore',\r\n    { ...req },\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const getItem = (itemID, updateStatus) => {\r\n  getData(\r\n    `/api/getItem/${itemID}`,\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const getInformationAboutFruit = (fruitId, updateStatus) => {\r\n  getData(\r\n    `/api/getInformationAboutFruit/${fruitId}`,\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const getPackages = updateStatus => {\r\n  getData(\r\n    '/api/getPackages',\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const getFruits = updateStatus => {\r\n  getData(\r\n    '/api/fruit/',\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n\r\nexport const getFruit = (fruitID, updateStatus) => {\r\n  getData(\r\n    `/api/fruit/${fruitID}`,\r\n    () => updateStatus({loading: true, error: null, result: null}),\r\n    ({status, message}) => updateStatus({loading: false, error: message, result: null, status}),\r\n    ({status, result}) => updateStatus({loading: false, error: null, result, status})\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport classNames from 'classnames';\r\nimport style from './event.module.css';\r\n\r\n\r\nconst Event = ({ timestamp, description, className}) => (\r\n    <div className={classNames(style.container, className)}>\r\n        <h3>{moment(timestamp).format('DD.MM.YYYY (HH:mm)')}</h3>\r\n        <p>{description}</p>\r\n    </div>\r\n);\r\n\r\nEvent.propTypes = {\r\n    timestamp: PropTypes.string,\r\n    name: PropTypes.string,\r\n};\r\n\r\nexport default Event;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Arrow = ({ className }) => <FontAwesomeIcon className={className} icon={faArrowDown} size=\"2x\" />;\r\n\r\nArrow.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Arrow;","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Event from './event/Event';\r\nimport Arrow from './arrow/Arrow';\r\nimport style from './history.module.css';\r\n\r\nconst History = ({ events }) => (\r\n    <div>\r\n        <h2>From farm to table</h2>\r\n        <p>What is your FOOD's story?</p>\r\n        <div className={style.history}>\r\n            {events.map(({timestamp, description}, index) => (\r\n                <Fragment  key={timestamp}>\r\n                    {(index !== 0) && <Arrow />}\r\n                    <Event timestamp={timestamp} description={description} />\r\n                </Fragment>\r\n            ))}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nHistory.propTypes = {\r\n    events: PropTypes.arrayOf(PropTypes.shape({\r\n        timestamp: PropTypes.string,\r\n        description: PropTypes.string\r\n    }))\r\n};\r\n\r\nexport default History;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from '../packages.module.css';\r\n\r\nconst Package = ({ packageID, onClick }) => (\r\n    <button \r\n        className={style.package}\r\n        onClick={() => onClick(packageID)}    \r\n    >\r\n        {packageID}\r\n    </button>\r\n);\r\n\r\nPackage.propTypes = {\r\n    packageID: PropTypes.string,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default Package;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Package from './package/package';\r\nimport style from './packages.module.css';\r\n\r\nconst Packages = ({ packageIDs, onClick }) => {\r\n    if (!packageIDs) return null;\r\n\r\n    return (\r\n        <div className={style.packages}>\r\n            {packageIDs.map(id => <Package key={id} packageID={id} onClick={onClick} />)}\r\n        </div>\r\n    );\r\n};\r\n\r\nPackages.propTypes = {\r\n    packageIDs: PropTypes.arrayOf(PropTypes.string),\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default Packages;","import React, { useEffect, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faStoreAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport style from './ecoStore.module.css';\r\nimport Form from '../components/form/Form';\r\nimport Input from '../components/form/input/Input';\r\nimport History from './history/History';\r\nimport Card from '../components/card/Card';\r\nimport SuccessMessage from '../components/message/SuccessMessage';\r\nimport ErrorMessage from '../components/message/ErrorMessage';\r\nimport useStatus from '../requests/useStatus';\r\nimport { getItem, getPackages } from '../blockchain/requests';\r\nimport uuid from '../uuid/uuid';\r\nimport Packages from './packages/packages';\r\n\r\nconst resposponseToEvents = response => {\r\n  const events = [];\r\n  if (!response) return events;\r\n  \r\n  if (response.dateOfHarvest) {\r\n    events.push({\r\n      timestamp: response.dateOfHarvest,\r\n      description: `Batch ${response.batchID} was harvested at ${response.farmID} on lotNo: ${response.lotNo}`\r\n    })\r\n  }\r\n  if (response.dateOfPackaging) {\r\n    events.push({\r\n      timestamp: response.dateOfPackaging,\r\n      description: `Was packaged at ${response.packagingHouseID}`\r\n    })\r\n  }\r\n  if (response.dateOfDistribution) {\r\n    events.push({\r\n      timestamp: response.dateOfDistribution,\r\n      description: `Was distributed by ${response.distributionCenterID}`\r\n    })\r\n  }\r\n  if (response.dateOfDelivery) {\r\n    events.push({\r\n      timestamp: response.dateOfDelivery,\r\n      description: `Was delivered to ${response.storeID}`\r\n    })\r\n  }\r\n  return events;\r\n}\r\n\r\nconst EcoStore = () => {\r\n  const [idStatus, updateIdStatus] = useStatus()\r\n  const [{loading, error, result, status}, updatePackageStatus] = useStatus()\r\n  const [packageID, setPackageID] = useState(uuid('P'));\r\n  const handleSubmit = req => getItem(req.packageID, updatePackageStatus);\r\n\r\n  useEffect(() => {\r\n    getPackages(updateIdStatus);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <header className={style.background}>\r\n        <Packages \r\n          packageIDs={idStatus.result} \r\n          onClick={setPackageID} \r\n        />\r\n        <Card>\r\n          <FontAwesomeIcon icon={faStoreAlt} size=\"6x\"/>\r\n          <h1>EcoStore</h1>\r\n          <Form onSubmit={handleSubmit}>\r\n          {error && <ErrorMessage title={status} messsage={error} />}\r\n          {result && <SuccessMessage title={status} />}\r\n            <Input \r\n              id=\"packageID\"\r\n              name=\"packageID\"\r\n              label=\"Package-Id\" \r\n              value={packageID} \r\n              onChange={e => setPackageID(e.target.value)}\r\n              disabled={loading}\r\n            />\r\n            <Input \r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n              disabled={loading}\r\n            />\r\n          </Form>\r\n          <History events={resposponseToEvents(result)} />\r\n        </Card>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EcoStore;\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route\r\n} from 'react-router-dom';\r\nimport './App.css';\r\nimport Farm from './farm/Farm';\r\nimport EcoStore from './ecoStore/EcoStore';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <header className=\"background\">\r\n        <Router>\r\n          <Route path=\"/fruitfarm\"><Farm /></Route>\r\n          <Route path=\"/ecostore\"><EcoStore /></Route>\r\n        </Router>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}